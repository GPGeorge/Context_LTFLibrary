@page "/admin"
@using LTF_Library_V1.DTOs
@using LTF_Library_V1.Services
@using Microsoft.AspNetCore.Authorization 
@using Microsoft.AspNetCore.Identity
@using LTF_Library_V1.Data.Models
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject IRequestManagementService RequestService
@inject IPublicationService PublicationService
@inject IPublisherService PublisherService
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@* @inject IEmailSender EmailSender*@
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin,Staff")]

<PageTitle>Admin Dashboard - Lander Trail Foundation</PageTitle>

<div class="admin-dashboard">
    <div class="admin-header">
        <h1 class="admin-title">Admin Dashboard</h1>
        <div>
            @if (CurrentUser != null)
            {
                <span>Welcome, '@CurrentUser?.FullName' </span>
            }
            else
            {
                <span style="color: red;">Welcome, [CurrentUser is NULL]</span>
            }
            <button @onclick="LogoutAsync" class="logout-btn">Logout</button>
        </div>
    </div>

    <div class="admin-nav">
        <div class="admin-nav-links">
            <a href="javascript:void(0)" @onclick="@(() => SetActiveTab("requests"))"
               class="admin-nav-link @(ActiveTab == "requests" ? "active" : "")">
                Pending Requests (@PendingCount)
            </a>
            <a href="javascript:void(0)" @onclick="@(() => SetActiveTab("users"))"
               class="admin-nav-link @(ActiveTab == "users" ? "active" : "")">
                User Management
            </a>
            <a href="/masterlists" class="admin-nav-link">Master Lists</a>
            <a href="javascript:void(0)" @onclick="@(() => SetActiveTab("editPubs"))"
               class="admin-nav-link @(ActiveTab == "editPubs" ? "active" : "")">
                Edit Publication Details
            </a>
            <button @onclick="BackToSearch"
                class="admin-nav-link"
                style="background: none; border: none; cursor: pointer;">
            Back to Search
            </button>
         </div>
     </div>
    

    @if (ActiveTab == "requests")
    {
        <div class="request-queue">
            <div class="request-queue-header">
                <h3>Pending Publication Requests</h3>
                <button @onclick="RefreshRequests" class="btn-base btn-secondary">Refresh</button>
            </div>

            @if (IsLoading)
            {
                <div style="padding: 40px; text-align: center;">
                    <p>Loading requests...</p>
                </div>
            }
            else if (PendingRequests?.Any() == true)
            {
                <table class="request-table">
                    <thead>
                        <tr>
                            <th>Publication</th>
                            <th>Requester</th>
                            <th>Type</th>
                            @* new *@
                            <th>Status</th>
                            <th>Purpose</th>
                            <th>Date</th>
                            <th>Days Ago</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in PendingRequests)
                        {
                            <tr>
                                <td class="publication-title" title="@request.PublicationTitle">
                                    @request.PublicationTitle
                                </td>
                                <td class="requester-name">
                                    <div>@request.RequesterName</div>
                                    <div style="font-size: 0.8em; color: #666;">@request.Email</div>
                                </td>
                                <td>
                                    <span class="status-badge request-type">@request.RequestType</span>
                                </td>
                                <td>
                                    <span class="status-badge status-pending">@request.Status</span>
                                </td>

                                <td><span class="status-badge request-purpose">@request.ResearchPurpose</span></td>
                                <td class="request-date">@request.FormattedRequestDate</td>
                                <td>
                                    <span class="@(request.DaysAgo > 7 ? "text-danger" : request.DaysAgo > 3 ? "text-warning" : "")">
                                        @request.DaysAgo days
                                    </span>
                                </td>
                                <td>
                                    <div class="request-actions">
                                      @*   <button @onclick="@(() => ViewRequest(request))" class="action-btn view-btn">
                                            View
                                        </button> *@
                                        <button @onclick="@(() => ShowProcessModal(request, "Approve"))" class="action-btn approve-btn">
                                            Approve
                                        </button>
                                        <button @onclick="@(() => ShowProcessModal(request, "Deny"))" class="action-btn deny-btn">
                                            Deny
                                        </button>
                                        <button @onclick="@(() => ShowProcessModal(request, "RequestInfo"))" class="action-btn info-btn">
                                            Request Info
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div style="padding: 40px; text-align: center; color: #666;">
                    <p>No pending requests at this time.</p>
                </div>
            }
        </div>
    }
    @if (ActiveTab == "users")
    {
        @if (User.IsInRole("Admin")) // Restricts User Management to Admin
        {
            <div class="request-queue">
                <div class="request-queue-header">
                    <h3>User Management</h3>
                    <button @onclick="RefreshUsers" class="btn-base btn-secondary">Refresh</button>
                </div>

                <!-- New User Registration Form -->
                <h4>Add New User</h4>
                <EditForm Model="@registerModel" OnValidSubmit="RegisterAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>First Name</label>
                        <InputText @bind-Value="registerModel.FirstName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <InputText @bind-Value="registerModel.LastName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="registerModel.Email" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="registerModel.Password" type="password" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Confirm Password</label>
                        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Register New User</button>
                </EditForm>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <p class="text-danger">@ErrorMessage</p>
                }

                @if (IsLoadingUsers)
                {
                    <div style="padding: 40px; text-align: center;">
                        <p>Loading users...</p>
                    </div>
                }
                else if (Users?.Any() == true)
                {
                    <table class="request-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Roles</th>
                                <th>Status</th>
                                <th>Last Login</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.FullName</td>
                                    <td>@user.Username</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <div class="user-roles">
                                            @foreach (var role in user.Roles)
                                            {
                                                <span class="role-badge">@role</span>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <span class="status-badge @(user.IsActive ? "status-approved" : "status-denied")">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td class="request-date">
                                        @(user.LastLoginDate?.ToString("MMM dd, yyyy") ?? "Never")
                                    </td>
                                    <td>
                                        <div class="request-actions">
                                            @if (user.IsActive)
                                            {
                                                <button @onclick="@(() => DeactivateUser(user.Id))" class="action-btn deny-btn">
                                                    Deactivate
                                                </button>
                                            }
                                            else
                                            {
                                                <button @onclick="@(() => ActivateUser(user.Id))" class="action-btn approve-btn">
                                                    Activate
                                                </button>
                                            }
                                            <button @onclick="@(() => ShowRoleModal(user))" class="action-btn info-btn">
                                                Roles
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div style="padding: 40px; text-align: center; color: #666;">
                        <p>No users found.</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>You do not have permission to manage users.</p>
        }
    }

    @if (ActiveTab == "editPubs")
    {
        <div class="request-queue">
            <div class="request-queue-header">
                <h3>Edit Publications</h3>
                <button @onclick="RefreshEditPubsData" class="btn-base btn-secondary">Refresh</button>
                <div class="request-queue-header">
                    <h3>Edit Publications</h3>
                    <div style="display: flex; gap: 10px;">
                        <button @onclick="OpenAddNewPublicationModal" class="btn-base btn-primary">Add New Publication</button>
                        <button @onclick="RefreshEditPubsData" class="btn-base btn-secondary">Refresh</button>
                    </div>
                </div>
            </div>
            <!-- Search Section -->
            <div class="publication-search-section">
                <div class="search-controls">
                    <div class="search-row">
                        <div class="search-field">
                            <label>Title:</label>
                            <input type="text" @bind="PublicationSearchCriteria.Title" @bind:event="oninput"
                                   placeholder="Search by title..." />
                        </div>
                        <div class="search-field">
                            <label>Author:</label>
                            <select @bind="PublicationSearchCriteria.CreatorId">
                                <option value="">All Authors</option>
                                @if (Authors != null)
                                {
                                    @foreach (var author in Authors)
                                    {
                                        <option value="@author.CreatorID">@author.FullName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="search-actions">
                        <button @onclick="SearchEditPubsPublications" class="btn-base btn-primary">Search</button>
                        <button @onclick="ClearEditPubsSearch" class="btn-base btn-secondary">Clear</button>
                    </div>
                </div>
            </div>
            <!-- Results Table -->
            @if (PublicationSearchResults?.Any() == true)
            {
                <table class="request-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Author(s)</th>
                            <th>Year</th>
                            <th>Publisher</th>
                            <th>Type</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pub in PublicationSearchResults)
                        {
                            <tr>
                                <td class="publication-title">@pub.PublicationTitle</td>
                                <td>@string.Join(", ", pub.Authors)</td>
                                <td>@pub.YearPublished</td>
                                <td>@pub.PublisherName</td>
                                <td>@pub.MediaTypeName</td>
                                <td>
                                    <button @onclick="@(() => OpenEditPublicationModal(pub.PublicationID))"
                                            class="action-btn approve-btn">
                                        Edit
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div> 
    }
</div>

<!-- Request Processing Modal -->
@if (ShowProcessingModal && SelectedRequest != null)
{
    <div class="modal" @onclick="CloseProcessingModal">
        <div class="modal-content" @onclick:stopPropagation="true" style="max-width: 600px;">
            <div class="modal-header">
                <h2 class="modal-title">Process Request</h2>
                <button class="close-btn" @onclick="CloseProcessingModal">&times;</button>
            </div>

            <div class="processing-form">
                <h3 style="color: #3498db; margin-bottom: 10px;">@SelectedRequest.PublicationTitle</h3>
                <p><strong>Requester:</strong> @SelectedRequest.RequesterName (@SelectedRequest.Email)</p>
                <p><strong>Request Type:</strong> @SelectedRequest.RequestType</p>
                <p><strong>Research Purpose:</strong> @SelectedRequest.ResearchPurpose</p>
                @if (!string.IsNullOrEmpty(SelectedRequest.AdditionalInfo))
                {
                    <p><strong>Additional Info:</strong> @SelectedRequest.AdditionalInfo</p>
                }

                <EditForm Model="ProcessRequest" OnValidSubmit="ProcessRequestAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="action-selection">
                        <label style="font-weight: bold; color: #2c3e50;">Action:</label>
                        <div class="action-options">
                            <div class="action-option @(ProcessRequest.Action == "Approve" ? "selected" : "")"
                                 @onclick="@(() => ProcessRequest.Action = "Approve")">
                                <input type="radio" name="action" checked="@(ProcessRequest.Action == "Approve")"
                                       @onchange="@(() => ProcessRequest.Action = "Approve")" />
                                <label>Approve Request - Grant access to the publication</label>
                            </div>
                            <div class="action-option @(ProcessRequest.Action == "Deny" ? "selected" : "")"
                                 @onclick="@(() => ProcessRequest.Action = "Deny")">
                                <input type="radio" name="action" checked="@(ProcessRequest.Action == "Deny")"
                                       @onchange="@(() => ProcessRequest.Action = "Deny")" />
                                <label>Deny Request - Decline access to the publication</label>
                            </div>
                            <div class="action-option @(ProcessRequest.Action == "RequestInfo" ? "selected" : "")"
                                 @onclick="@(() => ProcessRequest.Action = "RequestInfo")">
                                <input type="radio" name="action" checked="@(ProcessRequest.Action == "RequestInfo")"
                                       @onchange="@(() => ProcessRequest.Action = "RequestInfo")" />
                                <label>Request More Information - Ask for additional details</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-field">
                        <label for="adminNotes">Admin Notes (optional):</label>
                        <InputTextArea @bind-Value="ProcessRequest.AdminNotes" id="adminNotes"
                                       placeholder="Add any notes or instructions for the requester..." />
                    </div>

                    <div style="text-align: center; margin-top: 25px;">
                        <button type="submit" class="btn-base btn-success" disabled="@IsProcessing">
                            @if (IsProcessing)
                            {
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>@GetActionButtonText()</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Role Management Modal -->
@if (ShowRoleModalFlag && SelectedUser != null)
{
    <div class="modal" @onclick="CloseRoleModal">
        <div class="modal-content" @onclick:stopPropagation="true" style="max-width: 500px;">
            <div class="modal-header">
                <h2 class="modal-title">Manage User Roles</h2>
                <button class="close-btn" @onclick="CloseRoleModal">&times;</button>
            </div>

            <div class="processing-form">
                <h3 style="color: #3498db; margin-bottom: 15px;">@SelectedUser.FullName</h3>

                <div class="form-field">
                    <label>Current Roles:</label>
                    <div class="user-roles" style="margin-top: 10px;">
                        @foreach (var role in SelectedUser.Roles)
                        {
                            <span class="role-badge">@role</span>
                        }
                    </div>
                </div>

                <div class="form-field">
                    <label>Available Actions:</label>
                    <div style="margin-top: 10px;">
                        @if (!SelectedUser.Roles.Contains("Admin"))
                        {
                            <button @onclick="@(() => AssignRole(SelectedUser.Id, "Admin"))" class="btn-base btn-primary" style="margin: 5px;">
                                Make Admin
                            </button>
                        }
                        else if (SelectedUser.Roles.Contains("Admin") && SelectedUser.Id != CurrentUser?.Id)
                        {
                            <button @onclick="@(() => RemoveRole(SelectedUser.Id, "Admin"))" class="btn-base btn-secondary" style="margin: 5px;">
                                Remove Admin
                            </button>
                        }

                        @if (!SelectedUser.Roles.Contains("Staff"))
                        {
                            <button @onclick="@(() => AssignRole(SelectedUser.Id, "Staff"))" class="btn-base btn-primary" style="margin: 5px;">
                                Make Staff
                            </button>
                        }
                        else
                        {
                            <button @onclick="@(() => RemoveRole(SelectedUser.Id, "Staff"))" class="btn-base btn-secondary" style="margin: 5px;">
                                Remove Staff
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (ShowEditPublicationModal && EditingPublication != null)
    {
        <div class="modal" @onclick="CloseEditPublicationModal">
            <div class="large-modal modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h2 class="modal-title">@(IsAddingNewPublication ? "Add New Publication" : "Edit Publication")</h2>
                    <button class="close-btn" @onclick="CloseEditPublicationModal">&times;</button>
                </div>

                <div class="modal-body">
                    <EditForm Model="EditingPublication" OnValidSubmit="SavePublicationChanges">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Basic Information Section -->
                        <div class="edit-section">
                            <h3>Basic Information</h3>
                            <div class="form-grid">
                                <div class="form-field full-width">
                                    <label for="title">Title *</label>
                                    <InputText @bind-Value="EditingPublication.PublicationTitle" id="title" class="large-input" />
                                </div>

                                <div class="form-field">
                                    <label for="isbn">ISBN</label>
                                    <InputText @bind-Value="EditingPublication.ISBN" id="isbn" />
                                </div>

                                <div class="form-field">
                                    <label for="year">Year Published</label>
                                    <InputText @bind-Value="EditingPublication.YearPublished" id="year" />
                                </div>

                                <div class="form-field">
                                    <label for="edition">Edition</label>
                                    <InputText @bind-Value="EditingPublication.Edition" id="edition" />
                                </div>

                                <div class="form-field">
                                    <label for="pages">Pages</label>
                                    <InputNumber @bind-Value="EditingPublication.Pages" id="pages" />
                                </div>

                                <div class="form-field">
                                    <label for="volume">Volume</label>
                                    <InputNumber @bind-Value="EditingPublication.Volume" id="volume" />
                                </div>

                                <div class="form-field">
                                    <label for="numVolumes">Number of Volumes</label>
                                    <InputNumber @bind-Value="EditingPublication.NumberOfVolumes" id="numVolumes" />
                                </div>
                            </div>
                        </div>

                        <!-- Publisher Section -->
                        <div class="edit-section">
                            <h3>Publisher</h3>
                            <div class="form-field">
                                <label>Select Publisher</label>
                                <select @bind="EditingPublication.PublisherID" class="form-control">
                                    <option value="">Select Publisher...</option>
                                    @if (Publishers != null)
                                    {
                                        @foreach (var pub in Publishers)
                                        {
                                            <option value="@pub.PublisherID">@pub.DisplayName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Authors Section -->
                        <div class="edit-section">
                            <h3>Authors/Creators</h3>
                            <div class="current-authors">
                                @if (EditingPublication.SelectedAuthors?.Any() == true)
                                {
                                    <p><strong>Current Authors:</strong> @string.Join(", ", EditingPublication.SelectedAuthors.Select(a => a.FullName))</p>
                                }
                                else
                                {
                                    <p class="no-items">No authors assigned</p>
                                }
                                <p class="help-text">Author management coming soon...</p>
                            </div>
                        </div>

                        <!-- Categories Section  -->
                        <div class="edit-section">
                            <h3>Categories</h3>
                            <div class="current-categories">
                                @if (EditingPublication.SelectedCategories?.Any() == true)
                                {
                                    <p><strong>Current Categories:</strong> @string.Join(", ", EditingPublication.SelectedCategories.Select(c => c.Genre))</p>
                                }
                                else
                                {
                                    <p class="no-items">No categories assigned</p>
                                }
                                <p class="help-text">Category management coming soon...</p>
                            </div>
                        </div>

                        <!-- Keywords Section -->
                        <div class="edit-section">
                            <h3>Keywords</h3>
                            <div class="current-keywords">
                                @if (EditingPublication.Keywords?.Any() == true)
                                {
                                    <p><strong>Current Keywords:</strong> @string.Join(", ", EditingPublication.Keywords)</p>
                                }
                                else
                                {
                                    <p class="no-items">No keywords assigned</p>
                                }
                                <p class="help-text">Keyword management coming soon...</p>
                            </div>
                        </div>

                        <!-- Description Section -->
                        <div class="edit-section">
                            <h3>Description & Notes</h3>
                            <div class="form-field full-width">
                                <label for="comments">Description</label>
                                <InputTextArea @bind-Value="EditingPublication.Comments" id="comments" rows="5" />
                            </div>
                        </div>

                        <!-- Save/Cancel Buttons -->
                        <div class="modal-footer">
                            <button type="submit" class="btn-base btn-success" disabled="@IsSavingPublication">
                                @(IsSavingPublication ? "Saving..." : "Save Changes")
                            </button>
                            <button type="button" @onclick="CloseEditPublicationModal" class="btn-base btn-secondary">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
}

<!-- Publication Edit Modal - Add this after your existing modals in Admin.razor -->
@* Publication Edit Modal *@
@if (ShowEditPublicationModal && EditingPublication != null)
{
    <div class="modal" @onclick="CloseEditPublicationModal">
        <div class="large-modal modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2 class="modal-title">Edit Publication</h2>
                <button class="close-btn" @onclick="CloseEditPublicationModal">&times;</button>
            </div>

            <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                <EditForm Model="EditingPublication" OnValidSubmit="SavePublicationChanges">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @* Basic Information Section *@
                    <div class="form-section">
                        <h3>Basic Information</h3>
                        <div class="form-row">
                            <div class="form-field flex-grow">
                                <label for="pubTitle">Title *</label>
                                <InputText @bind-Value="EditingPublication.PublicationTitle" id="pubTitle" />
                            </div>
                            <div class="form-field">
                                <label for="pubYear">Year Published</label>
                                <InputText @bind-Value="EditingPublication.YearPublished" id="pubYear" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-field">
                                <label for="pubISBN">ISBN</label>
                                <InputText @bind-Value="EditingPublication.ISBN" id="pubISBN" />
                            </div>
                            <div class="form-field">
                                <label for="pubEdition">Edition</label>
                                <InputText @bind-Value="EditingPublication.Edition" id="pubEdition" />
                            </div>
                            <div class="form-field">
                                <label for="pubPages">Pages</label>
                                <InputNumber @bind-Value="EditingPublication.Pages" id="pubPages" />
                            </div>
                        </div>

                        <div class="form-field">
                            <label for="pubComments">Comments/Description</label>
                            <InputTextArea @bind-Value="EditingPublication.Comments" id="pubComments" rows="3" />
                        </div>
                    </div>

                    @* Authors Section *@
                    <div class="form-section">
                        <h3>Authors/Creators</h3>

                        @* Display Selected Authors *@
                        <div class="selected-items-container">
                            @if (EditingPublication.SelectedAuthors != null && EditingPublication.SelectedAuthors.Any())
                            {
                                <div class="author-chips">
                                    @foreach (var author in EditingPublication.SelectedAuthors)
                                    {
                                        <div class="author-chip">
                                            <span>@author.FullName</span>
                                            <button type="button" class="remove-btn" @onclick="() => RemoveAuthor(author.CreatorID)">
                                                ×
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="no-items-text">No authors selected</p>
                            }
                        </div>

                        @* Add Author Dropdown *@
                        <div class="add-item-row">
                            <select @onchange="AddAuthor" class="form-select">
                                <option value="">-- Select Author to Add --</option>
                                @if (AvailableAuthors != null && EditingPublication?.SelectedAuthors != null)
                                {
                                    @foreach (var author in AvailableAuthors.Where(a =>
                                                                !EditingPublication.SelectedAuthors.Any(sa => sa.CreatorID == a.CreatorID)))
                                    {
                                        <option value="@author.CreatorID">@author.FullName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    @* Categories Section *@
                    <div class="form-section">
                        <h3>Categories/Genres</h3>

                        @* Display Selected Categories *@
                        <div class="selected-items-container">
                            @if (EditingPublication?.SelectedCategories != null && EditingPublication.SelectedCategories.Any())
                            {
                                <div class="category-chips">
                                    @foreach (var category in EditingPublication.SelectedCategories)
                                    {
                                        <div class="category-chip">
                                            <span>@category.Genre</span>
                                            <button type="button" class="remove-btn" @onclick="() => RemoveCategory(category.GenreID)">
                                                ×
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="no-items-text">No categories selected</p>
                            }
                        </div>

                        @* Add Category Dropdown *@
                        <div class="add-item-row">
                            <select @onchange="AddCategory" class="form-select">
                                <option value="">-- Select Category to Add --</option>
                                @if (AvailableCategories != null && EditingPublication?.SelectedCategories != null)
                                {
                                    @foreach (var category in AvailableCategories.Where(c => !EditingPublication.SelectedCategories.Any(sc => sc.GenreID == c.GenreID)))
                                    {
                                        <option value="@category.GenreID">@category.Genre</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    @* Publisher Section *@
                    <div class="form-section">
                        <h3>Publisher</h3>
                        <div class="form-row">
                            <div class="form-field">
                                <label for="pubPublisher">Publisher</label>
                                @if (EditingPublication != null)
                                {
                                    <InputSelect @bind-Value="EditingPublication.PublisherID" id="pubPublisher">
                                        <option value="">-- Select Publisher --</option>
                                        @if (Publishers != null)
                                        {
                                            @foreach (var publisher in Publishers)
                                            {
                                                <option value="@publisher.PublisherID">@publisher.DisplayName</option>
                                            }
                                        }
                                    </InputSelect>
                                }
                            </div>
                            <div class="form-field">
                                <label for="pubMediaType">Media Type</label>
                                @if (EditingPublication != null)
                                {
                                    <InputSelect @bind-Value="EditingPublication.MediaTypeID" id="pubMediaType">
                                        <option value="">-- Select Media Type --</option>
                                        @if (MediaTypes != null)
                                        {
                                            @foreach (var mediaType in MediaTypes)
                                            {
                                                <option value="@mediaType.MediaTypeID">@mediaType.MediaType</option>
                                            }
                                        }
                                    </InputSelect>
                                }
                            </div>
                        </div>
                    </div>

                    @* Keywords Section *@
                    <div class="form-section">
                        <h3>Keywords</h3>

                        @* Display Selected Keywords *@
                        <div class="selected-items-container">
                            @if (EditingPublication?.Keywords != null && EditingPublication.Keywords.Any())
                            {
                                <div class="keyword-chips">
                                    @foreach (var keyword in EditingPublication.Keywords)
                                    {
                                        <div class="keyword-chip">
                                            <span>@keyword</span>
                                            <button type="button" class="remove-btn" @onclick="() => RemoveKeyword(keyword)">
                                                ×
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="no-items-text">No keywords added</p>
                            }
                        </div>
                    </div>

                       
                    @* Add Keyword Input with Autocomplete *@
                    <div class="add-item-row">
                        <div class="keyword-input-container">
                            <input type="text" @bind="NewKeyword" @bind:event="oninput" 
                                    @onkeydown="@((e) => HandleKeywordKeyDown(e))"
                                    placeholder="Type keyword and press Enter or click Add"
                                    list="keyword-suggestions" class="form-input" />
                            <button type="button" @onclick="AddKeyword" class="btn-add-keyword">
                                Add Keyword
                            </button>
                        </div>
                        <datalist id="keyword-suggestions">
                            @if (ApprovedKeywords != null&& EditingPublication?.Keywords != null)
                            {
                                @foreach (var keyword in ApprovedKeywords.Where(k => 
                                    !EditingPublication.Keywords.Contains(k) && 
                                    (string.IsNullOrEmpty(NewKeyword) || k.Contains(NewKeyword, StringComparison.OrdinalIgnoreCase))))
                                {
                                    <option value="@keyword" />
                                }
                            }
                        </datalist>
                    </div>



                    <div class="modal-footer">
                        <button type="submit" class="btn-base btn-success" disabled="@IsSavingPublication">
                            @if (IsSavingPublication)
                            {
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Changes</span>
                            }
                        </button>
                        <button type="button" @onclick="CloseEditPublicationModal" class="btn-base btn-secondary">
                            Cancel
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    // State management
    private string ActiveTab = "requests";
    private bool IsLoading = true;
    private bool IsLoadingUsers = false;
    private bool IsProcessing = false;
    private bool IsAddingNewPublication = false;
    private PublicationSearchCriteria PublicationSearchCriteria = new();
    private List<PublicationSearchResult>? PublicationSearchResults;
    private List<CreatorDto>? Authors;
    private List<GenreDto>? Genres;
    private List<MediaTypeDto>? MediaTypes;
    private List<PublisherDto>? Publishers;  
    private bool ShowEditPublicationModal = false;
    private PublicationEditDto? EditingPublication;
    private bool IsSavingPublication = false;
    private List<CreatorDto>? AvailableAuthors;
    private List<GenreDto>? AvailableCategories;
    private List<string>? ApprovedKeywords;
    private string NewKeyword = string.Empty;
    // Data
    private List<PendingRequestDto>? PendingRequests;
    private List<UserDto>? Users;
    private UserDto? CurrentUser;
    private int PendingCount => PendingRequests?.Count ?? 0;

    // Modal state
    private bool ShowProcessingModal = false;
    private bool ShowRoleModalFlag = false;
    private PendingRequestDto? SelectedRequest;
    private UserDto? SelectedUser;
    private ProcessRequestDto ProcessRequest = new();
    private void BackToSearch()
    {
        Navigation.NavigateTo($"{Navigation.BaseUri}collection");
    }
    private ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user using AuthenticationStateProvider instead of UserService
            Console.WriteLine("=== ADMIN PAGE AUTH DEBUG ===");

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            User = authState.User;
            Console.WriteLine($"=== ADMIN INITIALIZATION DEBUG ===");
            Console.WriteLine($"User is authenticated: {authState.User?.Identity?.IsAuthenticated}");
            Console.WriteLine($"User identity name: '{authState.User?.Identity?.Name}'");
            Console.WriteLine($"User identity type: {authState.User?.Identity?.GetType().Name}");

            Console.WriteLine($"Blazor Claims Count: {authState.User.Claims.Count()}");
            var roles = authState.User.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role").Select(c => c.Value);
            Console.WriteLine($"Blazor User Roles: [{string.Join(", ", roles)}]");
            Console.WriteLine($"Blazor Has Admin Role: {authState.User.IsInRole("Admin")}");

            if (authState.User?.Identity?.IsAuthenticated == true)
            {
                var username = authState.User.Identity.Name;
                if (!string.IsNullOrEmpty(username))
                {
                    // Get user details by username instead of using HttpContext
                    // CurrentUser = await UserService.GetUserByUsernameAsync(username);
                    CurrentUser = await UserService.GetCurrentUserByClaimsPrincipalAsync(authState.User);
                }
            }

            await LoadPendingRequests();
        }
        catch (Exception ex)
        {
            // Can't use JSRuntime here due to prerendering - log to console instead
            Console.WriteLine($"Error initializing admin dashboard: {ex.Message}");
        }
    }

    private async Task LoadPendingRequests()
    {
        IsLoading = true;
        try
        {
            PendingRequests = await RequestService.GetPendingRequestsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading requests: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadUsers()
    {
        IsLoadingUsers = true;
        try
        {
            Users = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading users: {ex.Message}");
        }
        finally
        {
            IsLoadingUsers = false;
        }
    }

    private async Task SetActiveTab(string tab)
    {
        ActiveTab = tab;
        if (tab == "users" && Users == null)
        {
            await LoadUsers();
        }
        else if (tab == "editPubs" && PublicationSearchResults == null)
        {
            await LoadDropdownDataForPublications();
        }
    }
    private async Task LoadDropdownDataForPublications()
    {
        try
        {
            Authors = await PublicationService.GetAuthorsAsync();
            Genres = await PublicationService.GetGenresAsync();
            MediaTypes = await PublicationService.GetMediaTypesAsync();
            Publishers = await PublisherService.GetPublishersAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading dropdown data: {ex.Message}");
        }
    }

    private async Task RefreshRequests()
    {
        await LoadPendingRequests();
    }
    private async Task EditPub() /* New Task for new EditPub function */
    {
        
    }
    private async Task RefreshPub() /* New Task for new EditPub function */
    {

    }
    private async Task RefreshUsers()
    {
        await LoadUsers();
    }
    //Temporarily leave viewRequest but don't show it to users at this point. it's redundant because it only duplicates what's on this page already.
    // private async Task ViewRequest(PendingRequestDto request)
    // {
    //     var details = $"Publication: {request.PublicationTitle}\n\n" +
    //                  $"Requester: {request.RequesterName}\n" +
    //                  $"Email: {request.Email}\n" +
    //                  $"Phone: {request.Phone ?? "Not provided"}\n\n" +
    //                  $"Request Type: {request.RequestType}\n" +
    //                  $"Research Purpose: {request.ResearchPurpose}\n\n" +
    //                  $"Additional Information:\n{request.AdditionalInfo ?? "None provided"}\n\n" +
    //                  $"Requested: {request.FormattedRequestDate}";

    //     await JSRuntime.InvokeVoidAsync("alert", details);
    // }

    //Publications editing methods
    private async Task SearchEditPubsPublications()
    {
        try
        {
            var searchRequest = new PublicationSearchRequest
            {
                Criteria = PublicationSearchCriteria,
                Page = 1,
                PageSize = 50
            };
            var response = await PublicationService.SearchPublicationsAsync(searchRequest);
            PublicationSearchResults = response.Results;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error searching publications: {ex.Message}");
        }
    }
    private void ClearEditPubsSearch()
    {
        PublicationSearchCriteria = new();
        PublicationSearchResults = null;
    }

    private async Task RefreshEditPubsData()
    {
        await LoadDropdownDataForPublications();
        if (PublicationSearchResults != null)
        {
            await SearchEditPubsPublications();
        }
    }
    private async Task OpenEditPublicationModal(int publicationId)
    {
        try
        {
            // Load the publication data
            EditingPublication = await PublicationService.GetPublicationForEditAsync(publicationId);

            if (EditingPublication != null)
            {
                // Initialize collections if they're null
                EditingPublication.SelectedAuthors ??= new List<CreatorDto>();
                EditingPublication.SelectedCategories ??= new List<GenreDto>();
                EditingPublication.Keywords ??= new List<string>();

                // Load dropdown data
                AvailableAuthors = await PublicationService.GetAuthorsAsync();
                Console.WriteLine($"=== AUTHORS: Loaded {AvailableAuthors?.Count ?? 0} authors");
                if (AvailableAuthors?.Any() == true)
                    Console.WriteLine($"First author: {AvailableAuthors.First().FullName}");
                AvailableCategories = await PublicationService.GetGenresAsync();
                if (AvailableCategories?.Any() == true)
                    Console.WriteLine($"First category: {AvailableCategories.First().Genre}");

                ApprovedKeywords = await PublicationService.GetAllKeywordsAsync();
                Publishers = await PublicationService.GetPublishersAsync();
                Console.WriteLine($"=== PUBLISHERS: Loaded {Publishers?.Count ?? 0} publishers");

                MediaTypes = await PublicationService.GetMediaTypesAsync();

                ShowEditPublicationModal = true;
                StateHasChanged(); // Add this to force re-render
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading publication: {ex.Message}");
        }
    }

    private async Task OpenAddNewPublicationModal()
    {
        try
        {
            // Initialize a new empty publication
            EditingPublication = new PublicationEditDto
            {
                PublicationTitle = string.Empty,
                YearPublished = string.Empty,
                ISBN = string.Empty,
                Edition = string.Empty,
                Comments = string.Empty,
                SelectedAuthors = new List<CreatorDto>(),
                SelectedCategories = new List<GenreDto>(),
                Keywords = new List<string>(),
                PublisherID = null,
                MediaTypeID = null
            };

            // Load dropdown data
            AvailableAuthors = await PublicationService.GetAuthorsAsync();
            AvailableCategories = await PublicationService.GetGenresAsync();
            ApprovedKeywords = await PublicationService.GetAllKeywordsAsync();
            Publishers = await PublisherService.GetPublishersAsync();
            MediaTypes = await PublicationService.GetMediaTypesAsync();

            IsAddingNewPublication = true;
            ShowEditPublicationModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error initializing new publication: {ex.Message}");
        }
    }
    private void HandleKeywordKeyDown(KeyboardEventArgs e)
{
    if (e.Key == "Enter")
    {
       
        AddKeyword();
    }
}
    private async Task EditPublication(int publicationId)
    {
        try
        {
            EditingPublication = await PublicationService.GetPublicationForEditAsync(publicationId);
            if (EditingPublication != null)
            {
                // Load dropdown data
                AvailableAuthors = await PublicationService.GetAuthorsAsync();
                AvailableCategories = await PublicationService.GetGenresAsync();
                ApprovedKeywords = await PublicationService.GetAllKeywordsAsync();
                Publishers = await PublisherService.GetPublishersAsync();
                MediaTypes = await PublicationService.GetMediaTypesAsync();

                IsAddingNewPublication = false;
                ShowEditPublicationModal = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Publication not found.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading publication: {ex.Message}");
        }
    }
    
    private void AddAuthor(ChangeEventArgs e)
    {
        if (EditingPublication == null)
            return;

        if (int.TryParse(e.Value?.ToString(), out int authorId) && authorId > 0)
        {
            var author = AvailableAuthors?.FirstOrDefault(a => a.CreatorID == authorId);
            if (author != null && !EditingPublication.SelectedAuthors.Any(a => a.CreatorID == authorId))
            {
                EditingPublication.SelectedAuthors.Add(author);
                StateHasChanged();
            }
        }
    }
    private void RemoveAuthor(int authorId)
    {
        if (EditingPublication == null)
            return;

        var author = EditingPublication.SelectedAuthors.FirstOrDefault(a => a.CreatorID == authorId);
        if (author != null)
        {
            EditingPublication.SelectedAuthors.Remove(author);
            StateHasChanged();
        }
    }
    private void AddCategory(ChangeEventArgs e)
    {
        if (EditingPublication == null)
            return;

        if (int.TryParse(e.Value?.ToString(), out int categoryId) && categoryId > 0)
        {
            var category = AvailableCategories?.FirstOrDefault(c => c.GenreID == categoryId);
            if (category != null && !EditingPublication.SelectedCategories.Any(c => c.GenreID == categoryId))
            {
                EditingPublication.SelectedCategories.Add(category);
                StateHasChanged();
            }
        }
    }

    private void RemoveCategory(int categoryId)
    {
        if (EditingPublication == null)
            return;

        var category = EditingPublication.SelectedCategories.FirstOrDefault(c => c.GenreID == categoryId);
        if (category != null)
        {
            EditingPublication.SelectedCategories.Remove(category);
            StateHasChanged();
        }
    }
    private void AddKeyword()
    {
        if (EditingPublication == null || string.IsNullOrWhiteSpace(NewKeyword))
            return;

        var trimmedKeyword = NewKeyword.Trim();
        if (!EditingPublication.Keywords.Contains(trimmedKeyword, StringComparer.OrdinalIgnoreCase))
        {
            EditingPublication.Keywords.Add(trimmedKeyword);
            NewKeyword = string.Empty;
            StateHasChanged();
        }
    }

    private void RemoveKeyword(string keyword)
    {
        if (EditingPublication == null)
            return;

        EditingPublication.Keywords.Remove(keyword);
        StateHasChanged();
    }

    private void CloseEditPublicationModal()
    {
        ShowEditPublicationModal = false;
        EditingPublication = null;
        NewKeyword = string.Empty;
        IsAddingNewPublication = false;   
        StateHasChanged();
    }
    private class RegisterModel
    {
        [Required]
        public string FirstName
        {
            get; set;
        }
        [Required]
        public string LastName
        {
            get; set;
        }
        public string Email
        {
            get; set;
        }
        public string Password
        {
            get; set;
        }
        public string ConfirmPassword
        {
            get; set;
        }
    }

    private RegisterModel registerModel = new();
    private string ErrorMessage
    {
        get; set;
    }

    //here
    private async Task SavePublicationChanges()
    {
        if (EditingPublication == null)
            return;

        IsSavingPublication = true;
        try
        {
            ServiceResult result;

            if (IsAddingNewPublication)
            {
                // Create new publication
                result = await PublicationService.CreatePublicationAsync(EditingPublication);
            }
            else
            {
                // Update existing publication
                result = await PublicationService.UpdatePublicationAsync(EditingPublication);
            }

            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    IsAddingNewPublication ? "Publication created successfully!" : "Publication updated successfully!");
                CloseEditPublicationModal();

                // Refresh the search results if they exist
                if (PublicationSearchResults != null)
                {
                    await SearchEditPubsPublications();
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error saving publication: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving publication: {ex.Message}");
        }
        finally
        {
            IsSavingPublication = false;
        }
    }
    //to here

    private async Task RegisterAsync()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        var user = new ApplicationUser { UserName = registerModel.Email, Email = registerModel.Email, FirstName = registerModel.FirstName, LastName = registerModel.LastName, };
        Console.WriteLine($"Creating user: Email={user.Email}, FirstName={user.FirstName}, LastName={user.LastName}"); // Debug
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, "Staff"); // Default to Staff role
            ErrorMessage = "User registered successfully.";
            registerModel = new RegisterModel(); // Reset form
            await RefreshUsers();
        }
        else
        {
            ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }
    private void ShowProcessModal(PendingRequestDto request, string defaultAction)
    {
        SelectedRequest = request;
        ProcessRequest = new ProcessRequestDto
        {
            RequestID = request.RequestID,
            Action = defaultAction,
            ProcessedBy = CurrentUser?.Id ?? "Admin"
        };
        ShowProcessingModal = true;
    }

    private void CloseProcessingModal()
    {
        ShowProcessingModal = false;
        SelectedRequest = null;
        ProcessRequest = new();
    }

    private void ShowRoleModal(UserDto user)
    {
        SelectedUser = user;
        ShowRoleModalFlag = true;
    }

    private void CloseRoleModal()
    {
        ShowRoleModalFlag = false;
        SelectedUser = null;
    }

    private async Task ProcessRequestAsync()
    {
        IsProcessing = true;
        try
        {
            var result = await RequestService.ProcessRequestAsync(ProcessRequest);
            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message);
                CloseProcessingModal();
                await LoadPendingRequests();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error processing request: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task DeactivateUser(string userId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to deactivate this user?"))
        {
            var success = await UserService.DeactivateUserAsync(userId);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User deactivated successfully.");
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error deactivating user.");
            }
        }
    }

    private async Task ActivateUser(string userId)
    {
        var success = await UserService.ActivateUserAsync(userId);
        if (success)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User activated successfully.");
            await LoadUsers();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error activating user.");
        }
    }

    private async Task AssignRole(string userId, string roleName)
    {
        var success = await UserService.AssignRoleAsync(userId, roleName);
        if (success)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Role '{roleName}' assigned successfully.");
            await LoadUsers();
            CloseRoleModal();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error assigning role '{roleName}'.");
        }
    }

    private async Task RemoveRole(string userId, string roleName)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the '{roleName}' role?"))
        {
            var success = await UserService.RemoveFromRoleAsync(userId, roleName);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Role '{roleName}' removed successfully.");
                await LoadUsers();
                CloseRoleModal();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error removing role '{roleName}'.");
            }
        }
    }

    private async Task LogoutAsync()
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var logoutUrl = $"{baseUri}/Account/logout";
        var homePath = $"{baseUri}/";

        await JSRuntime.InvokeVoidAsync("performLogout", logoutUrl, homePath);
    }
    private string GetActionButtonText()
    {
        return ProcessRequest.Action switch
        {
            "Approve" => "Approve Request",
            "Deny" => "Deny Request",
            "RequestInfo" => "Request More Info",
            _ => "Process Request"
        };
    }

}