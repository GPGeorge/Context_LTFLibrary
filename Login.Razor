@page "/login"
@using LTF_Library_V1.DTOs
@using LTF_Library_V1.Services
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http
 
@* <div style="background: yellow; border: 2px solid red; padding: 15px; margin: 10px;">
    <h3>BLAZOR COMPONENT TEST</h3>
    <p><strong>Current Time:</strong> @DateTime.Now.ToString("HH:mm:ss.fff")</p>
    <p><strong>Random Number:</strong> @randomNumber</p>
    <p><strong>Render Count:</strong> @renderCount</p>
</div> *@

@* @code {
    private int renderCount = 0;

    protected override void OnInitialized()
    {
        renderCount++;
        Console.WriteLine($"=== Login.razor OnInitialized called {renderCount} times ===");
    }
} *@
<PageTitle>Login - Lander Trail Foundation</PageTitle>

<div class="main-layout">
    <!-- Left Panel - Same Intro as Collection Page -->
    <div class="intro-panel">
        <header class="collection-header">
            <img src="images/LanderTrailLogo.jpg" alt="LTF Library Logo" class="header-logo" />
            <div class="header-text">
                <h1>Lander Trail Foundation</h1>
                <p>Preserving History Through Books, Periodicals, Audio Recordings, and Documents</p>
            </div>
        </header>

        <div class="visitor-info-section">
            <h2>Library Staff Access</h2>
            <p>This login system is for library staff and administrators to manage publication requests and user accounts.</p>

            <div class="visitor-info">
                <div class="info-box">
                    <h3>📞 Need Help?</h3>
                    <p>
                        Contact the library administrator<br>
                        <strong>Phone:</strong> (307) 883-2174<br>
                        <strong>Email:</strong> mspotten@hotmail.com
                    </p>
                </div>
            </div>
        </div>

        <div class="navigation-links">
            <a href="../" class="back-link">← Back to Search</a>
        </div>
    </div>

    <!-- Right Panel - Login Form -->
    <div class="search-panel">
        <div class="search-controls-fixed">
            <div class="login-header">
                <h2>Staff Login</h2>
                <p>Enter your credentials to access the admin dashboard</p>
            </div>

            <div class="advanced-search-form">
                <div class="advanced-search-form">
                   
                    <EditForm Model="LoginModel" OnValidSubmit="LoginAsync" OnInvalidSubmit="OnInvalidSubmit">
                      <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(ErrorMessage) || !string.IsNullOrEmpty(Error))
                        {
                            <div class="validation-errors">
                                @(ErrorMessage ?? Error)
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(SuccessMessage))
                        {
                            <div style="color: #27ae60; margin-bottom: 15px; font-weight: bold;">
                                @SuccessMessage
                            </div>
                        }

                        <div class="login-form">
                            <div class="form-field">
                                <label for="username">Username:</label>
                                <InputText @bind-Value="LoginModel.Username" id="username"
                                           class="form-input-search" placeholder="Enter your username" />
                                <ValidationMessage For="() => LoginModel.Username" />
                            </div>

                            <div class="form-field">
                                <label for="password">Password:</label>
                                <InputText @bind-Value="LoginModel.Password" id="password"
                                           type="password" class="form-input-search" placeholder="Enter your password" />
                                <ValidationMessage For="() => LoginModel.Password" />
                            </div>

                            <div class="remember-me">
                                <InputCheckbox @bind-Value="LoginModel.RememberMe" id="rememberMe" />
                                <label for="rememberMe">Remember me</label>
                            </div>

                            <div class="login-actions">
                                <button type="submit" class="btn-base btn-primary" disabled="@IsLoggingIn">
                                    @if (IsLoggingIn)
                                    {
                                        <span>Logging in...</span>
                                    }
                                    else
                                    {
                                        <span>Login</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
              
            </div>
        </div>

        @if (ShowRegisterForm)
        {
            <div class="search-results-scrollable">
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 15px;">Create New Staff Account</h3>

                    <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-row">
                            <div class="form-field">
                                <label for="firstName">First Name:</label>
                                <InputText @bind-Value="RegisterModel.FirstName" id="firstName" />
                                <ValidationMessage For="() => RegisterModel.FirstName" />
                            </div>
                            <div class="form-field">
                                <label for="lastName">Last Name:</label>
                                <InputText @bind-Value="RegisterModel.LastName" id="lastName" />
                                <ValidationMessage For="() => RegisterModel.LastName" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-field">
                                <label for="regUsername">Username:</label>
                                <InputText @bind-Value="RegisterModel.Username" id="regUsername" />
                                <ValidationMessage For="() => RegisterModel.Username" />
                            </div>
                            <div class="form-field">
                                <label for="regEmail">Email:</label>
                                <InputText @bind-Value="RegisterModel.Email" id="regEmail" type="email" />
                                <ValidationMessage For="() => RegisterModel.Email" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-field">
                                <label for="regPassword">Password:</label>
                                <InputText @bind-Value="RegisterModel.Password" id="regPassword" type="password" />
                                <ValidationMessage For="() => RegisterModel.Password" />
                            </div>
                            <div class="form-field">
                                <label for="confirmPassword">Confirm Password:</label>
                                <InputText @bind-Value="RegisterModel.ConfirmPassword" id="confirmPassword" type="password" />
                                <ValidationMessage For="() => RegisterModel.ConfirmPassword" />
                            </div>
                        </div>

                        <div style="text-align: center; margin-top: 20px;">
                            <button type="submit" class="btn-base btn-success" disabled="@IsRegistering">
                                @if (IsRegistering)
                                {
                                    <span>Creating Account...</span>
                                }
                                else
                                {
                                    <span>Create Account</span>
                                }
                            </button>
                            <button type="button" @onclick="() => ShowRegisterForm = false" class="btn-base btn-secondary">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div class="search-results-scrollable">
                <div class="search-prompt">
                    <h3>Welcome to the Library Management System</h3>
                    <p>Please log in with your staff credentials to access the admin dashboard and manage publication requests.</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private LoginDto LoginModel = new();
    private RegisterDto RegisterModel = new();
    private bool IsLoggingIn = false;
    private bool IsRegistering = false;
    private bool ShowRegisterForm = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Error
    {
        get; set;
    }
  
    // private async Task TestFormSubmit()
    // {
    //     Console.WriteLine("=== TEST FORM SUBMIT CALLED ===");
    //     Console.WriteLine($"Username: '{LoginModel.Username}'");
    //     Console.WriteLine($"Password length: {LoginModel.Password?.Length ?? 0}");

    //     // Manually call LoginAsync for testing
    //     await LoginAsync();
    // }
    private void OnUsernameChanged()
    {
        Console.WriteLine($"Current time: {DateTime.Now}");
        Console.WriteLine($"=== USERNAME CHANGED: '{LoginModel.Username}' ===");
    }

    private void OnPasswordChanged()
    {
        Console.WriteLine($"Current time: {DateTime.Now}");
        Console.WriteLine($"=== PASSWORD CHANGED: Length {LoginModel.Password?.Length ?? 0} ===");
    }
    private void OnInvalidSubmit()
    {
        Console.WriteLine("=== FORM INVALID SUBMIT ===");
        Console.WriteLine($"Username: '{LoginModel.Username}'");
        Console.WriteLine($"Password: '{LoginModel.Password}'");
        Console.WriteLine($"Username empty: {string.IsNullOrEmpty(LoginModel.Username)}");
        Console.WriteLine($"Password empty: {string.IsNullOrEmpty(LoginModel.Password)}");
        CheckFormState();
    }
    private int randomNumber = new Random().Next(1000);


    // private void TestButtonClick()
    // {
    //     Console.WriteLine("=== TEST BUTTON CLICKED ===");
    //     Console.WriteLine($"Time: {DateTime.Now}");
    // }
    private void CheckFormState()
    {
        Console.WriteLine("=== FORM VALIDATION CHECK ===");
        Console.WriteLine($"Username: '{LoginModel.Username}' (length: {LoginModel.Username?.Length ?? 0})");
        Console.WriteLine($"Password: '{new string('*', LoginModel.Password?.Length ?? 0)}'");
        Console.WriteLine($"Username is null or empty: {string.IsNullOrEmpty(LoginModel.Username)}");
        Console.WriteLine($"Password is null or empty: {string.IsNullOrEmpty(LoginModel.Password)}");
    }


    // private void OnLoginButtonClick()
    // {
    //     Console.WriteLine("=== LOGIN BUTTON CLICKED ===");
    //     Console.WriteLine($"Username: '{LoginModel.Username}'");
    //     Console.WriteLine($"Password length: {LoginModel.Password?.Length ?? 0}");
    //     Console.WriteLine($"IsLoggingIn: {IsLoggingIn}");
    // }
    public class LoginResponse
    {
        public bool success { get; set; }
        public string message { get; set; } = string.Empty;
        public string? redirectUrl { get; set; }
        public List<string>? errors { get; set; }
    }

    // In your Login.razor, replace the LoginAsync method with this:
    private async Task LoginAsync()
    {
        Console.WriteLine("=== LoginAsync CALLED - METHOD ENTRY ===");
        Console.WriteLine($"Current time: {DateTime.Now}");

        IsLoggingIn = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            var baseUri = Navigation.BaseUri.TrimEnd('/');
            var isLocal = baseUri.Contains("localhost");
            var loginUrl = $"{baseUri}/Account/login"; // Use full baseUri, including /LTFCatalog in production
            var adminPath = isLocal ? "/admin" : "/LTFCatalog/admin";

            Console.WriteLine($"=== LOGIN.RAZOR DEBUG ===");
            Console.WriteLine($"BaseUri: '{baseUri}'");
            Console.WriteLine($"LoginUrl: '{loginUrl}'");
            Console.WriteLine($"Username: '{LoginModel.Username}'");
            Console.WriteLine($"Password length: {LoginModel.Password?.Length ?? 0}");
            Console.WriteLine($"RememberMe: {LoginModel.RememberMe}");
            Console.WriteLine($"About to invoke JS login post");

            var loginData = new
            {
                Username = LoginModel.Username,
                Password = LoginModel.Password,
                RememberMe = LoginModel.RememberMe
            };

            await JSRuntime.InvokeVoidAsync("performLogin", loginUrl, loginData, adminPath);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login exception: {ex.Message}");
            Console.WriteLine($"Login exception stack: {ex.StackTrace}");
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            IsLoggingIn = false;
        }
    }
     private async Task RegisterAsync()
    {
        IsRegistering = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            var result = await UserService.RegisterAsync(RegisterModel);

            if (result.Success)
            {
                SuccessMessage = "Account created successfully! You can now log in.";
                ShowRegisterForm = false;
                RegisterModel = new(); // Reset form
            }
            else
            {
                ErrorMessage = result.Message;
                if (result.Errors.Any())
                {
                    ErrorMessage += ": " + string.Join(", ", result.Errors);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Registration failed: {ex.Message}";
        }
        finally
        {
            IsRegistering = false;
        }
    }

    private void ShowRegistrationForm()
    {
        ShowRegisterForm = true;
        ErrorMessage = null;
        SuccessMessage = null;
    }
}