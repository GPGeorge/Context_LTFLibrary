@using LTF_Library_V1.DTOs
@using LTF_Library_V1.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@if (IsAuthenticated && CurrentUser != null)
{
    <div class="admin-nav" style="margin-top: 20px;">
        <div style="text-align: center;">
            <p style="margin-bottom: 10px; color: #2c3e50;">
                Welcome, <strong>@CurrentUser.FullName</strong>
            </p>
            <div style="display: flex; justify-content: center; gap: 10px; flex-wrap: wrap;">
                @{
                    var isDevelopment = Navigation.BaseUri.Contains("localhost");
                    var adminPath = isDevelopment ? "/admin" : "/LTFCatalog/admin";
                }
                @if (IsAdmin)
                {
                    <a href="@adminPath" class="admin-link">Admin Dashboard</a>
                }
                else if (IsStaff)
                {
                    <a href="@adminPath" class="admin-link">Staff Dashboard</a>
                }
                <button @onclick="LogoutAsync" class="admin-link" style="background: none; border: 1px solid #dc3545; color: #dc3545;">
                    Logout
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div style="text-align: center; margin-top: 20px;">
        @{
            var isDevelopment = Navigation.BaseUri.Contains("localhost");
            var loginPath = isDevelopment ? "/login" : "/LTFCatalog/login";
        }
        <a href="@loginPath" class="admin-link">Staff Login</a>
    </div>
}

@code {
    private bool IsAuthenticated = false;
    private bool IsAdmin = false;
    private bool IsStaff = false;
    private UserDto? CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            Console.WriteLine($"AdminNavigation - IsAuthenticated: {IsAuthenticated}");
            Console.WriteLine($"AdminNavigation - UserName: '{authState.User.Identity?.Name}'");

            if (IsAuthenticated && !string.IsNullOrEmpty(authState.User.Identity?.Name))
            {
                // Try to get current user using the more reliable method
                CurrentUser = await UserService.GetCurrentUserByClaimsPrincipalAsync(authState.User);

                Console.WriteLine($"AdminNavigation - CurrentUser: {( CurrentUser != null ? CurrentUser.FullName : "NULL" )}");

                if (CurrentUser != null)
                {
                    IsAdmin = CurrentUser.Roles.Contains("Admin");
                    IsStaff = CurrentUser.Roles.Contains("Staff") || IsAdmin;
                }
                else
                {
                    // If we can't get user details, treat as not authenticated
                    IsAuthenticated = false;
                }
            }
            else
            {
                IsAuthenticated = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"AdminNavigation error: {ex.Message}");
            IsAuthenticated = false;
            CurrentUser = null;
        }
    }

    private async Task LogoutAsync()
    {
        await UserService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }
}